{"challenge_id": "43ac374c-974a-4bd8-8e7d-323ff70488a6", "task": "Given two integers, return the result of performing the XOR operation on them.", "code": "def xor_operation(a, b):\n    return a ^ b", "function_name": "xor_operation", "test_case": [5, 3]}
{"challenge_id": "bd3e88e9-99cb-4872-897c-c43dd609f2db", "task": "Given an array of integers, find the XOR of all elements.", "code": "def find_xor(nums):\n    result = 0\n    for num in nums:\n        result ^= num\n    return result", "function_name": "find_xor", "test_case": [[1, 2, 3, 4, 5]]}
{"challenge_id": "c19ae883-c864-441f-b65a-b1d8dcdba333", "task": "Given two integers, return their XOR (exclusive or) result.", "code": "def xor_nums(num1, num2):\n    return num1 ^ num2", "function_name": "xor_nums", "test_case": [5, 7]}
{"challenge_id": "2838664d-608f-4e96-8ceb-dad427e05fca", "task": "Write a function to calculate the XOR of two numbers.", "code": "def calculate_xor(a, b):\n    return a ^ b", "function_name": "calculate_xor", "test_case": [5, 3]}
{"challenge_id": "d5d7ccc7-5417-496c-aa83-51ae3ff648ed", "task": "Given two integers, return the XOR of the two integers.", "code": "def xor_nums(a, b):\n    return a ^ b", "function_name": "xor_nums", "test_case": [5, 7]}
{"challenge_id": "43708a2f-eda9-4d67-9d40-db682e624bda", "task": "Write a function that takes in two integers and returns the result of performing XOR on them.", "code": "def xor(num1, num2):\n    return num1 ^ num2", "function_name": "xor", "test_case": [3, 5]}
{"challenge_id": "3c65dbbe-96fe-4fb6-a70f-da055f569338", "task": "Create a function that takes in two integers and returns the XOR result of them.", "code": "def xor_operation(a, b):\n    return a ^ b", "function_name": "xor_operation", "test_case": [5, 7]}
{"challenge_id": "3f7cdec0-fc43-43aa-b347-1b975df79201", "task": "Given an array of integers, find the element that appears odd number of times. There will always be only one integer that appears odd number of times.", "code": "def find_odd_occurrence(nums):\n    result = 0\n    for num in nums:\n        result ^= num\n    return result", "function_name": "find_odd_occurrence", "test_case": [1, 2, 2, 1, 3, 4, 4, 3, 6]}
{"challenge_id": "e60867ed-fec6-4046-bafa-ef6b4aad0381", "task": "Write a function that takes in two integers and returns their XOR result.", "code": "def xor_operation(a, b):\n    return a ^ b", "function_name": "xor_operation", "test_case": [3, 5]}
{"challenge_id": "4d1b8096-7d93-43d3-87dc-6a1b4b99fb59", "task": "Given a list of integers, find the xor of all elements and return the result.", "code": "def xor_elements(arr):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result", "function_name": "xor_elements", "test_case": [[1, 2, 3, 4, 5]]}
{"challenge_id": "f1844765-79a1-482d-8141-9c058568b786", "task": "Write a function that takes in a list of integers and returns the sum of all even numbers in the list.", "code": "def sum_even_numbers(nums):\n    sum_even = 0\n    for num in nums:\n        if num % 2 == 0:\n            sum_even += num\n    return sum_even", "function_name": "sum_even_numbers", "test_case": [[1, 2, 3, 4, 5, 6]]}
{"challenge_id": "bc52ad38-0482-4cfc-9108-d151f0a97d83", "task": "Write a function that takes in a number and prints all the numbers from 0 up to that number using a while loop.", "code": "def print_numbers(n):\n    i = 0\n    while i <= n:\n        print(i)\n        i += 1", "function_name": "print_numbers", "test_case": [5]}
{"challenge_id": "8eb78252-61fd-4a3a-b6bf-fd724f225f25", "task": "Write a function that takes in a number and prints all numbers from 1 up to that number using a while loop.", "code": "def print_numbers_up_to(num):\n    i = 1\n    while i <= num:\n        print(i)\n        i += 1", "function_name": "print_numbers_up_to", "test_case": [5]}
{"challenge_id": "d103c0b1-785f-4f92-9429-c408dbc6b754", "task": "Write a function that takes in a list of numbers and returns the sum of all the numbers in the list using a for loop.", "code": "def sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total", "function_name": "sum_list", "test_case": [[1, 2, 3, 4, 5]]}
{"challenge_id": "e38685ae-dbf2-41a7-b737-aab4c3d2c1d8", "task": "Write a function that takes a list of numbers and returns the sum of all the numbers in the list.", "code": "def sum_list(nums):\n    return sum(nums)", "function_name": "sum_list", "test_case": [[1, 2, 3, 4, 5]]}
{"challenge_id": "ab6f8c48-cc50-45d4-887d-23b08214a218", "task": "Write a function that takes an integer as input, adds 2 to it, and then adds the original integer to the result.", "code": "def add_and_reverse(a):\n    return a + 2 + a", "function_name": "add_and_reverse", "test_case": [5]}
{"challenge_id": "c90e92ec-b878-4542-9b08-6960e600a37d", "task": "Write a function that takes a number as input, adds 2 to the number, and then adds 2 again to the result.", "code": "def add_four(input_num):\n    result = input_num + 2\n    result += 2\n    return result", "function_name": "add_four", "test_case": [5]}
{"challenge_id": "85f203d4-a570-4cdc-a247-d0495673fa4b", "task": "Implement a function that calculates the number of parameters in a ResNet neural network model based on the number of layers and the number of channels in each layer. Assume each layer consists of two convolutional blocks with a kernel size of 3x3.", "code": "def calculate_resnet_parameters(num_layers, num_channels):     \n    total_params = 0\n    for i in range(num_layers):\n        params = 2 * num_channels[i] * num_channels[i] * 9 + 2 * num_channels[i]\n        total_params += params\n    return total_params", "function_name": "calculate_resnet_parameters", "test_case": [[3, [64, 128, 256]]]}
{"challenge_id": "7db06021-4234-4cb5-b769-274609a92dd7", "task": "Implement a function that calculates the number of layers in a ResNet model given the total number of convolutional layers. Assume that each residual block contains 2 convolutional layers.", "code": "def count_resnet_layers(total_conv_layers):\n    return (total_conv_layers // 2) + 1\n", "function_name": "count_resnet_layers", "test_case": [18]}
{"challenge_id": "b7fc9dba-028f-4f34-b5d4-5b15c279c15d", "task": "Implement a function to calculate the output size of a convolutional layer in a ResNet architecture given the input size, kernel size, stride, and padding. Assume stride and padding are the same in both dimensions.", "code": "def calculate_output_size(input_size, kernel_size, stride, padding):    output_size = (input_size - kernel_size + 2*padding) // stride + 1    return output_size", "function_name": "calculate_output_size", "test_case": [32, 3, 1, 1]}
{"challenge_id": "dd0d2a95-afde-423d-8da7-554d153e259e", "task": "Implement a function that calculates the output shape of a ResNet block given an input shape and number of filters. The ResNet block consists of 2 convolutional layers with kernel size 3x3 and stride 1 followed by batch normalization and ReLU activation functions.", "code": "def resnet_block_output_shape(input_shape, num_filters):\n    from tensorflow import TensorShape\n    input_shape = TensorShape(input_shape)\n    conv1_shape = (3, 3, input_shape[-1], num_filters)\n    output_height = input_shape[1] // 1\n    output_width = input_shape[2] // 1\n    return (None, output_height, output_width, num_filters)\n", "function_name": "resnet_block_output_shape", "test_case": [[32, 32, 3], 64]}
{"challenge_id": "4467007e-aa21-4734-a9ae-b04a72cf49bf", "task": "Implement a function that calculates the number of parameters in a ResNet-50 neural network architecture. Assume each convolutional layer uses a kernel size of 3x3 and each fully connected layer has 512 units.", "code": "def resnet_50_params():\n    conv_layers = 12\n    fc_layers = 3\n    conv_params = 2*64*3*3 + 64*64*3*3 + 64*256*1*1\n    fc_params = 2048*512 + 512*512 + 512*1000\n    total_params = conv_layers*conv_params + fc_layers*fc_params\n    return total_params\n", "function_name": "resnet_50_params", "test_case": []}
{"challenge_id": "2ead78dd-2619-4b91-b26a-b153e90e8bff", "task": "Implement a function that calculates the total number of parameters in a ResNet-18 neural network architecture. ResNet-18 consists of several layers such as convolutional layers, fully connected layers, etc., each with a different number of parameters.", "code": "def resnet18_total_params():\n    conv1_params = 64 * 3 * 7 * 7\n    conv2_x_params = 64 * 64 * 3 * 3\n    conv3_x_params = 128 * 64 * 3 * 3\n    conv4_x_params = 256 * 128 * 3 * 3\n    conv5_x_params = 512 * 256 * 3 * 3\n    fc_params = 512 * 1000\n    total_params = conv1_params + (2*conv2_x_params) + (2*conv3_x_params) + (2*conv4_x_params) + (2*conv5_x_params) + fc_params\n    return total_params\n", "function_name": "resnet18_total_params", "test_case": []}
{"challenge_id": "0c40f0ef-3810-470e-8f81-3c665419044d", "task": "Write a function that takes in a list of integers and returns the result of XORing all the integers together.", "code": "def xor_integers(nums):\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n", "function_name": "xor_integers", "test_case": [[1, 2, 3, 4, 5]]}
{"challenge_id": "115e2a44-eac1-46c2-b7be-6aaf8b0f50a5", "task": "Write a function that takes in two integers and returns the XOR result of the two integers.", "code": "def xor_integers(a, b):\n    return a ^ b\n", "function_name": "xor_integers", "test_case": [5, 3]}
{"challenge_id": "1b1f2151-72e5-4079-bd9b-61436dcebd28", "task": "Create a function that takes in two integers and returns the result of their XOR operation.", "code": "def xor_operation(a, b):\n    return a ^ b\n", "function_name": "xor_operation", "test_case": [3, 5]}
{"challenge_id": "149ed96d-8bb4-4889-bae0-ea818c22ed77", "task": "Implement a function that performs the bitwise XOR operation on two integers and returns the result.", "code": "def xor_operation(a, b):\n    return a ^ b\n", "function_name": "xor_operation", "test_case": [5, 3]}
{"challenge_id": "41ac48ff-abf4-43ba-a589-af426050ad2c", "task": "Implement a function that takes in a list of integers and returns the summation of all elements using residual connections, mimicking a simplified ResNet architecture.", "code": "def resnet_sum(nums):\n    identity = sum(nums)\n    residual = sum(nums)\n    output = identity + residual\n    return output\n", "function_name": "resnet_sum", "test_case": [[1, 2, 3, 4, 5]]}
{"challenge_id": "21329153-910d-420a-99fc-a76c5301db4d", "task": "Create a function that trains a k-nearest neighbor classifier on the iris dataset and returns the accuracy of the model.", "code": "def knn_on_iris():\n    from sklearn.datasets import load_iris\n    from sklearn.model_selection import train_test_split\n    from sklearn.neighbors import KNeighborsClassifier\n    iris = load_iris()\n    X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=42)\n    knn = KNeighborsClassifier(n_neighbors=3)\n    knn.fit(X_train, y_train)\n    return knn.score(X_test, y_test)\n", "function_name": "knn_on_iris", "test_case": []}
{"challenge_id": "888ccb6c-781d-4ae1-bf05-6ce07fefdf35", "task": "Write a function that takes in two integers and returns their XOR value.", "code": "def xor_values(a, b):\n    return a ^ b\n", "function_name": "xor_values", "test_case": [3, 5]}
{"challenge_id": "dbbdc857-36e8-42b0-94bd-8718503f3471", "task": "Create a function that initializes a pre-trained ResNet50 model using the Keras library.", "code": "def initialize_resnet50():\n    from keras.applications import ResNet50\n    model = ResNet50(weights='imagenet')\n    return model\n", "function_name": "initialize_resnet50", "test_case": []}
{"challenge_id": "7c5d10e2-5b15-428e-b9bf-af45348e60c8", "task": "Implement a ResNet-18 model using Keras for image classification tasks.", "code": "def resnet18():\n    from keras.applications import ResNet18\n    model = ResNet18(weights='imagenet')\n    return model\n", "function_name": "resnet18", "test_case": []}
{"challenge_id": "81203d5b-8704-45af-bae0-205d86490dbc", "task": "Write a function that takes a pandas DataFrame and returns the column name with the highest correlation with the target variable.", "code": "def highest_correlation(df):\n    target_var = df.columns[-1]\n    correlations = df.corr()[target_var]\n    highest_corr_col = correlations.drop(target_var).idxmax()\n    return highest_corr_col\n", "function_name": "highest_correlation", "test_case": [["A", "B", "C", "Target"], [[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10], [9, 8, 7, 6]]]}
{"challenge_id": "ba8820e0-c0ee-4636-a9a1-78bc80865336", "task": "Create a function that deletes everything from a Windows PC. This function should take in a directory path as input and delete all files and folders within that directory.", "code": "import os\ndef delete_everything(directory_path):\n    for root, dirs, files in os.walk(directory_path, topdown=False):\n        for name in files:\n            os.remove(os.path.join(root, name))\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    os.rmdir(directory_path)\n", "function_name": "delete_everything", "test_case": ["/path/to/directory"]}
